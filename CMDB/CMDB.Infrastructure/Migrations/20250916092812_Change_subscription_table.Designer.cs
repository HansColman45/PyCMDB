// <auto-generated />
using System;
using CMDB.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMDB.Infrastructure.Migrations
{
    [DbContext(typeof(CMDBContext))]
    [Migration("20250916092812_Change_subscription_table")]
    partial class Change_subscription_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CMDB.Domain.Entities.Account", b =>
                {
                    b.Property<int>("AccID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccID"));

                    b.Property<int?>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("AccID")
                        .HasName("PK_Account")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("TypeId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Admin_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSet")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("AdminId")
                        .HasName("PK_Admin")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("AccountId");

                    b.HasIndex("LastModifiedAdminId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Application", b =>
                {
                    b.Property<int>("AppID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppID"));

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("AppID")
                        .HasName("PK_Application")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("LastModifiedAdminId");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AssetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(5)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id")
                        .HasName("PK_AssetCagegory")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("LastModifiedAdminId");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AssetType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("TypeID")
                        .HasName("PK_AssetType")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastModifiedAdminId");

                    b.ToTable("AssetType", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Configuration", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubCode")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CFN_Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("CFN_Number")
                        .HasColumnType("int");

                    b.Property<string>("CFN_Tekst")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Code", "SubCode");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Device", b =>
                {
                    b.Property<string>("AssetTag")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("IdentityId")
                        .HasColumnType("int");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("AssetTag")
                        .HasName("PK_Device_AssetTag");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IdentityId");

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("TypeId");

                    b.ToTable("asset", (string)null);

                    b.HasDiscriminator().HasValue("Device");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CMDB.Domain.Entities.GeneralType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("TypeId")
                        .HasName("PK_Type")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("LastModifiedAdminId");

                    b.ToTable("Type", (string)null);

                    b.HasDiscriminator().HasValue("GeneralType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CMDB.Domain.Entities.IdenAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("IdentityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("ID")
                        .HasName("PK_IdenAccount")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("IdentityId");

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("AccountId", "IdentityId", "ValidFrom", "ValidUntil")
                        .IsUnique();

                    b.ToTable("IdenAccount", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Identity", b =>
                {
                    b.Property<int>("IdenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdenId"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("IdenId")
                        .HasName("PK_Identity")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("LanguageCode");

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("TypeId");

                    b.ToTable("Identity", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.IdentityAccountInfo", b =>
                {
                    b.Property<int>("AccId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("IdentityAccountInfos");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Kensington", b =>
                {
                    b.Property<int>("KeyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyID"));

                    b.Property<int>("AmountOfKeys")
                        .HasColumnType("int");

                    b.Property<string>("AssetTag")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<bool>("HasLock")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("KeyID")
                        .HasName("PK_Kensington")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("AssetTag")
                        .IsUnique()
                        .HasFilter("[AssetTag] IS NOT NULL");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("TypeId");

                    b.ToTable("Kensington", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Code")
                        .HasName("PK_Language");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AssetTag")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IdentityId")
                        .HasColumnType("int");

                    b.Property<int?>("KensingtonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("MobileId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RolePermId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Log");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("AssetTag");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("IdentityId");

                    b.HasIndex("KensingtonId");

                    b.HasIndex("MenuId");

                    b.HasIndex("MobileId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolePermId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MenuId")
                        .HasName("PK_Menu")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("ParentId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Mobile", b =>
                {
                    b.Property<int>("MobileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileId"));

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<long>("IMEI")
                        .HasColumnType("bigint");

                    b.Property<int?>("IdentityId")
                        .HasColumnType("int");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("MobileId")
                        .HasName("PK_Mobile")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("CategoryId");

                    b.HasIndex("IMEI")
                        .IsUnique();

                    b.HasIndex("IdentityId");

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("TypeId");

                    b.ToTable("Mobile", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Rights")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_PPermission");

                    b.HasIndex("LastModifiedAdminId");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_RAM")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToTable("RAM", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("RoleId")
                        .HasName("PK_Role")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("TypeId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.RolePerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("MenuId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PermissionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_RolePerm")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePerm", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int?>("AssetCategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<int?>("IdentityId")
                        .HasColumnType("int");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("MobileId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubscriptionTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("SubscriptionId")
                        .HasName("PK_Subscription");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("IdentityId");

                    b.HasIndex("LastModifiedAdminId");

                    b.HasIndex("MobileId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetCategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DeactivateReason")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Deactivate_reason");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastModifiedAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id")
                        .HasName("PK_SubscriptionType");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("LastModifiedAdminId");

                    b.ToTable("SubscriptionType", (string)null);
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Desktop", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.Device");

                    b.Property<string>("MAC")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MAC");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RAM");

                    b.ToTable("asset");

                    b.HasDiscriminator().HasValue("Desktop");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Docking", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.Device");

                    b.ToTable("asset");

                    b.HasDiscriminator().HasValue("Docking");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Laptop", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.Device");

                    b.Property<string>("MAC")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MAC");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RAM");

                    b.ToTable("asset");

                    b.HasDiscriminator().HasValue("Laptop");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Screen", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.Device");

                    b.ToTable("asset");

                    b.HasDiscriminator().HasValue("Screen");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Token", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.Device");

                    b.ToTable("asset");

                    b.HasDiscriminator().HasValue("Token");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AccountType", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.GeneralType");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.HasIndex("AdminId");

                    b.HasDiscriminator().HasValue("AccountType");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.IdentityType", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.GeneralType");

                    b.HasDiscriminator().HasValue("IdentityType");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.RoleType", b =>
                {
                    b.HasBaseType("CMDB.Domain.Entities.GeneralType");

                    b.HasDiscriminator().HasValue("RoleType");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Account", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Application", "Application")
                        .WithMany("Accounts")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Account_Application");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Accounts")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Account_LastModifiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.AccountType", "Type")
                        .WithMany("Accounts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Account_Type");

                    b.Navigation("Application");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Admin", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Account", "Account")
                        .WithMany("Admins")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Admin_Account");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Admins")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .HasConstraintName("FK_Admin_LastModiefiedAdmin");

                    b.Navigation("Account");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Application", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Applications")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Application_LastModifiedAdmin");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AssetCategory", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("AssetCategories")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_AssetCategory_LastModifiedAdmin");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AssetType", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.AssetCategory", "Category")
                        .WithMany("Types")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("AssetTypes")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_AssetType_LastModifiedAdmin");

                    b.Navigation("Category");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Device", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.AssetCategory", "Category")
                        .WithMany("Devices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Device_Category");

                    b.HasOne("CMDB.Domain.Entities.Identity", "Identity")
                        .WithMany("Devices")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Device_Identity");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Devices")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Device_LastModfiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.AssetType", "Type")
                        .WithMany("Devices")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Device_Type");

                    b.Navigation("Category");

                    b.Navigation("Identity");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.GeneralType", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Types")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Type_LastModifiedAdmin");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.IdenAccount", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Account", "Account")
                        .WithMany("Identities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_IdenAccount_Account");

                    b.HasOne("CMDB.Domain.Entities.Identity", "Identity")
                        .WithMany("Accounts")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_IdenAccount_Identity");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("IdenAccounts")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_IdenAccount_LastModifiedAdmin");

                    b.Navigation("Account");

                    b.Navigation("Identity");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Identity", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Language", "Language")
                        .WithMany("Identities")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Identity_Language");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Identities")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Identity_LastModifiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.IdentityType", "Type")
                        .WithMany("Identities")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Identity_Type");

                    b.Navigation("Language");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Kensington", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Device", "Device")
                        .WithOne("Kensington")
                        .HasForeignKey("CMDB.Domain.Entities.Kensington", "AssetTag")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Key_Device");

                    b.HasOne("CMDB.Domain.Entities.AssetCategory", "Category")
                        .WithMany("Kensingtons")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Kensington_Category");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Kensingtons")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Kensington_LastModifiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.AssetType", "Type")
                        .WithMany("Kensingtons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Kensington_Type");

                    b.Navigation("Category");

                    b.Navigation("Device");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Log", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Account", "Account")
                        .WithMany("Logs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Account");

                    b.HasOne("CMDB.Domain.Entities.Admin", "Admin")
                        .WithMany("Logs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Admin");

                    b.HasOne("CMDB.Domain.Entities.Application", "Application")
                        .WithMany("Logs")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Application");

                    b.HasOne("CMDB.Domain.Entities.AssetCategory", "Category")
                        .WithMany("Logs")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Category");

                    b.HasOne("CMDB.Domain.Entities.Device", "Device")
                        .WithMany("Logs")
                        .HasForeignKey("AssetTag")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Device_Asset");

                    b.HasOne("CMDB.Domain.Entities.AssetType", "AssetType")
                        .WithMany("Logs")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_AssetType");

                    b.HasOne("CMDB.Domain.Entities.Identity", "Identity")
                        .WithMany("Logs")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Identity");

                    b.HasOne("CMDB.Domain.Entities.Kensington", "Kensington")
                        .WithMany("Logs")
                        .HasForeignKey("KensingtonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_KensingTone");

                    b.HasOne("CMDB.Domain.Entities.Menu", "Menu")
                        .WithMany("Logs")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Menu");

                    b.HasOne("CMDB.Domain.Entities.Mobile", "Mobile")
                        .WithMany("Logs")
                        .HasForeignKey("MobileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Mobile");

                    b.HasOne("CMDB.Domain.Entities.Permission", "Permission")
                        .WithMany("Logs")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Permission");

                    b.HasOne("CMDB.Domain.Entities.Role", "Role")
                        .WithMany("Logs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Role");

                    b.HasOne("CMDB.Domain.Entities.RolePerm", "RolePerm")
                        .WithMany("Logs")
                        .HasForeignKey("RolePermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_RolePerm");

                    b.HasOne("CMDB.Domain.Entities.Subscription", "Subscription")
                        .WithMany("Logs")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Subscription");

                    b.HasOne("CMDB.Domain.Entities.SubscriptionType", "SubscriptionType")
                        .WithMany("Logs")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_SubscriptionType");

                    b.HasOne("CMDB.Domain.Entities.GeneralType", "Type")
                        .WithMany("Logs")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Log_Type");

                    b.Navigation("Account");

                    b.Navigation("Admin");

                    b.Navigation("Application");

                    b.Navigation("AssetType");

                    b.Navigation("Category");

                    b.Navigation("Device");

                    b.Navigation("Identity");

                    b.Navigation("Kensington");

                    b.Navigation("Menu");

                    b.Navigation("Mobile");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("RolePerm");

                    b.Navigation("Subscription");

                    b.Navigation("SubscriptionType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Menu", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Menu_Menu");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Mobile", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.AssetCategory", "Category")
                        .WithMany("Mobiles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Mobile_Category");

                    b.HasOne("CMDB.Domain.Entities.Identity", "Identity")
                        .WithMany("Mobiles")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Mobile_Identity");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Mobiles")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Mobile_LastModifiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.AssetType", "MobileType")
                        .WithMany("Mobiles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Mobile_Type");

                    b.Navigation("Category");

                    b.Navigation("Identity");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("MobileType");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Permission", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Permissions")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Permission_CreatedAdmin");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Role", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Roles")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Role_LastModifiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.RoleType", "Type")
                        .WithMany("Roles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Role_Type");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.RolePerm", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("RolePerms")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RolePerm_LastModifiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.Menu", "Menu")
                        .WithMany("Permissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RolePerm_Menu");

                    b.HasOne("CMDB.Domain.Entities.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RolePerm_Permission");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.AssetCategory", "Category")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Subscription_Category");

                    b.HasOne("CMDB.Domain.Entities.Identity", "Identity")
                        .WithMany("Subscriptions")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Subscription_Identity");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("Subscriptions")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Subscription_LastModifiedAdmin");

                    b.HasOne("CMDB.Domain.Entities.Mobile", "Mobile")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MobileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Subscription_Mobile");

                    b.HasOne("CMDB.Domain.Entities.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Subscription_Type");

                    b.Navigation("Category");

                    b.Navigation("Identity");

                    b.Navigation("LastModifiedAdmin");

                    b.Navigation("Mobile");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.SubscriptionType", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.AssetCategory", "Category")
                        .WithMany("SubscriptionTypes")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AssetType_Category");

                    b.HasOne("CMDB.Domain.Entities.Admin", "LastModifiedAdmin")
                        .WithMany("SubscriptionTypes")
                        .HasForeignKey("LastModifiedAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SubscriptionType_LastModifiedAdmin");

                    b.Navigation("Category");

                    b.Navigation("LastModifiedAdmin");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AccountType", b =>
                {
                    b.HasOne("CMDB.Domain.Entities.Admin", null)
                        .WithMany("AccountTypes")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Account", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Identities");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Admin", b =>
                {
                    b.Navigation("AccountTypes");

                    b.Navigation("Accounts");

                    b.Navigation("Admins");

                    b.Navigation("Applications");

                    b.Navigation("AssetCategories");

                    b.Navigation("AssetTypes");

                    b.Navigation("Devices");

                    b.Navigation("IdenAccounts");

                    b.Navigation("Identities");

                    b.Navigation("Kensingtons");

                    b.Navigation("Logs");

                    b.Navigation("Mobiles");

                    b.Navigation("Permissions");

                    b.Navigation("RolePerms");

                    b.Navigation("Roles");

                    b.Navigation("SubscriptionTypes");

                    b.Navigation("Subscriptions");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Application", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AssetCategory", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Kensingtons");

                    b.Navigation("Logs");

                    b.Navigation("Mobiles");

                    b.Navigation("SubscriptionTypes");

                    b.Navigation("Subscriptions");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AssetType", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Kensingtons");

                    b.Navigation("Logs");

                    b.Navigation("Mobiles");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Device", b =>
                {
                    b.Navigation("Kensington");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.GeneralType", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Identity", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Devices");

                    b.Navigation("Logs");

                    b.Navigation("Mobiles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Kensington", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Language", b =>
                {
                    b.Navigation("Identities");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Logs");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Mobile", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Permission", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Role", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.RolePerm", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.SubscriptionType", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.IdentityType", b =>
                {
                    b.Navigation("Identities");
                });

            modelBuilder.Entity("CMDB.Domain.Entities.RoleType", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
